# yamllint disable rule:line-length
{{- $urls := list -}}
{{- $rootPersistence := .Values.persistence }}
{{- range $idx, $model := .Values.models.list }}
{{- $urls = append $urls (printf "%s %s" $model.url ($model.basicAuth | default "")) }}
{{- end }}
{{- $urls = join "," $urls}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "local-ai.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "local-ai.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "local-ai.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      name: {{ template "local-ai.fullname" . }}
      labels:
        app.kubernetes.io/name: {{ include "local-ai.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.deployment.runtimeClassName }}
      runtimeClassName: {{ . }}
      {{- end }}
      {{- with .Values.deployment.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "local-ai.serviceAccountName" . }}
      initContainers:
        # Additional initContainers from values.yaml
        {{- if .Values.initContainers }}
        {{- range .Values.initContainers }}
        - name: {{ .name }}
          image: {{ .image }}
          imagePullPolicy: {{ .imagePullPolicy }}
          {{- if .command }}
          command:
            {{- toYaml .command | nindent 12 }}
          {{- end }}
          {{- if .args }}
          args:
            {{- toYaml .args | nindent 6 }}
          {{- end }}
          {{- if .env }}
          env:
            {{- toYaml .env | nindent 6 }}
          {{- end }}
          {{- if .resources }}
          resources:
            {{- toYaml .resources | nindent 6 }}
          {{- end }}
          {{- if or .volumeMounts $rootPersistence }}
          volumeMounts:
          {{- if .volumeMounts }}
            {{- toYaml .volumeMounts | nindent 6 }}
          {{- end }}
          {{- range $key, $pvc := $rootPersistence }}
          {{- if $pvc.enabled }}
            - name: {{ $key }}
              mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .securityContext }}
          securityContext:
            {{- toYaml .securityContext | nindent 6 }}
          {{- end }}
        {{- end }}
        {{- end }}
        - name: download-model
          image: {{ .Values.deployment.download_model.image }}
          imagePullPolicy: {{ .Values.deployment.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              MODEL_DIR={{ .Values.deployment.modelsPath }}
              FORCE_DOWNLOAD={{ .Values.models.forceDownload }}
              URLS="{{ $urls }}"
              LOCK_DIR=/tmp/model-download-locks

              mkdir -p "$MODEL_DIR"
              mkdir -p "$LOCK_DIR"
              mkdir -p "/tmp/generated/images"
              mkdir -p "/tmp/generated/audio"
              rm -rf "/models/lost+found"

              validate_url() {
                  local url=$1
                  local regex='^(https?|ftp)://[a-zA-Z0-9.-]+(:[a-zA-Z0-9.-]+)?(/[a-zA-Z0-9._-]*)*$'
                  if [[ $url =~ $regex ]]; then
                      return 0 # URL is valid
                  else
                      return 1 # URL is invalid
                  fi
              }

              echo "List of URLs:"
              echo "$URLS"

              echo "$URLS" | awk -F, '{for (i=1; i<=NF; i++) print $i}' | while read -r line; do
                  url=$(echo "$line" | awk '{print $1}')
                  auth=$(echo "$line" | awk '{print $2}')
                  full_filename=$(basename "$url" .bin)
                  short_filename=$(echo "$full_filename" | cut -c1-20)
                  hash=$(echo "$full_filename" | sha256sum | cut -c1-12)
                  filename="${short_filename}_${hash}"
                  lockfile="$LOCK_DIR/$filename.lock"

                  # Validate URL
                  if ! validate_url "$url"; then
                      echo "Invalid URL: $url. Skipping download."
                      continue
                  fi

                  if [ -e "$MODEL_DIR/$filename" ]; then
                      echo "File $filename already exists. Skipping download."
                      continue
                  fi

                  if [ -e "$lockfile" ]; then
                      echo "Another pod is downloading $filename. Waiting for download to complete."
                      while [ -e "$lockfile" ]; do sleep 1; done
                      continue
                  fi

                  touch "$lockfile"

                  echo "Downloading $filename"
                  if [ -n "$auth" ]; then
                      wget --header "Authorization: Basic $auth" "$url" -O "$MODEL_DIR/$filename"
                  else
                      wget "$url" -O "$MODEL_DIR/$filename"
                  fi

                  if [ "$?" -ne 0 ]; then
                      echo "Download failed."
                      rm -f "$lockfile"
                      exit 1
                  else
                      echo "Download completed."
                      rm -f "$lockfile"
                  fi
              done

          volumeMounts:
            {{- range $key, $pvc := $rootPersistence }}
            {{- if $pvc.enabled }}
            - name: {{ $key }}
              mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
            {{- end }}
            {{- end }}

      containers:
        - name: {{ template "local-ai.fullname" . }}
          image: "{{ .Values.deployment.image.repository }}:{{ .Values.deployment.image.tag }}"
          imagePullPolicy: {{ .Values.deployment.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          env:
            {{- range $key, $value := .Values.deployment.env }}
            - name: {{ $key | upper }}
              value: {{ quote $value }}
            {{- end }}
            - name: GALLERIES
              value: {{ include "local-ai.galleries" . | squote }}
            - name: MODELS_PATH
              value: {{ .Values.deployment.modelsPath }}
          securityContext:
            runAsGroup: 1000
          volumeMounts:
            {{- range $key, $pvc := $rootPersistence}}
              {{- if $pvc.enabled }}
            - name: {{ $key }}
              mountPath: {{ $pvc.globalMount | default (print "/" $key) }}
              {{- end }}
            {{- end }}
        {{ include "local-ai.sidecars" . | nindent 8 }}
      {{- if $rootPersistence}}
      volumes:
        {{- range $key, $pvc := $rootPersistence}}
        {{- if $pvc.enabled }}
        - name: {{ $key }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" (include "local-ai.fullname" $) $key }}
        {{- else }}
        - name: {{ $key }}
          emptyDir: {}
        {{- end }}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
